bl_info = {
    'name': 'CRT Triangle C++ Header File Export',
    'author': 'bvpav',
    'version': (0, 0, 1),
    'blender': (4, 3, 2),
    'location': 'File > Export > CRT Triangle C++ Header File',
    'description': 'Export a triangle mesh as a CRT triangle C++ header file',
}

import textwrap

import bpy
from bpy_extras.io_utils import ExportHelper, axis_conversion
from bpy.types import Operator
from bpy.props import StringProperty
from mathutils import Vector


_blender_to_rh_conversion = axis_conversion(from_forward='-Y', from_up='Z', to_forward='Z', to_up='Y').to_4x4()


def _object_name_to_snake_case(name: str) -> str:
    return ''.join(c.lower() if c.isalpha() else '_' for c in name if c.isalpha()).rstrip('_')


def _get_triangle_world_vert_coords_rh(object: bpy.types.Object) -> list[list[Vector]]:
    if object.type != 'MESH':
        raise ValueError(f"{object!r} type must be 'MESH', got {object.type!r}")
    
    mesh = object.data
    
    triangles = []
    for triangle in mesh.loop_triangles:
        vert_coords = [_blender_to_rh_conversion @ object.matrix_world @ mesh.vertices[i].co for i in triangle.vertices]
        triangles.append(vert_coords)
    return triangles


def _cpp_format_float(value: float) -> str:
    value_str = str(value)
    value_str = value_str.rstrip('0')
    shortest_value_str = value_str.lstrip('.')
    if shortest_value_str != '.':
        value_str = shortest_value_str
    return f'{value_str}f'


def _cpp_format_vector(vector: Vector) -> str:
    return f'{{{_cpp_format_float(vector.x)}, {_cpp_format_float(vector.y)}, {_cpp_format_float(vector.z)}}}'


def _cpp_format_triangle(triangle: list[Vector]) -> str:
    if len(triangle) != 3:
        raise ValueError(f"Triangle must have 3 vertices, got {len(triangle)}")
    return f'{{ {_cpp_format_vector(triangle[0])}, {_cpp_format_vector(triangle[1])}, {_cpp_format_vector(triangle[2])} }}'


def _cpp_format_triangle_initializer_args(triangles: list[list[Vector]]) -> str:
    return ",\n".join(map(_cpp_format_triangle, triangles))


def _cpp_format_header(triangles: list[list[Vector]], namespace_name: str) -> str:
    initializer_args = _cpp_format_triangle_initializer_args(triangles)
    return f'''#pragma once

// This file was generated by the {bl_info['name']} Blender addon ({__name__}) v{'.'.join(map(str, bl_info['version']))}.

#include <array>

#include "crt_triangle.h"

namespace {namespace_name} {{

const std::array<crt::Triangle, {len(triangles)}> triangles{{{{\n{textwrap.indent(initializer_args, '    ')}\n}}}};

}}
'''



class ExportTriangleCppHeader(Operator, ExportHelper):
    bl_idname = "export_scene.crt_triangle_cpp_header"
    bl_label = "Export CRT Triangle C++ Header File"

    filename_ext = ".h"

    filter_glob: StringProperty(
        default="*.h",
        options={'HIDDEN'},
    )

    @classmethod
    def poll(cls, context):
        return context.active_object is not None and context.active_object.type == 'MESH'

    def execute(self, context):
        vert_coords = _get_triangle_world_vert_coords_rh(context.active_object)
        with open(self.filepath, 'w') as f:
            f.write(_cpp_format_header(vert_coords, _object_name_to_snake_case(context.active_object.name)))
        return {'FINISHED'}


def menu_func_export(self, context):
    self.layout.operator(ExportTriangleCppHeader.bl_idname, text="CRT Triangle C++ Header File (.h)")


def register():
    bpy.utils.register_class(ExportTriangleCppHeader)
    bpy.types.TOPBAR_MT_file_export.append(menu_func_export)


def unregister():
    bpy.utils.unregister_class(ExportTriangleCppHeader)
    bpy.types.TOPBAR_MT_file_export.remove(menu_func_export)


if __name__ == "__main__":
    register()